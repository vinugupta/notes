Python interview question

https://www.codementor.io/sheena/essential-python-interview-questions-du107ozr6
1)def print_directory_contents(sPath): """ This function takes the name of a directory and prints out the paths files within that directory as well as any files contained in contained directories. This function is similar to os.walk. Please don't use os.walk in your answer. We are interested in your ability to work with nested structures. ""” fill_this_in


import os
for root, dirs, files in os.walk(".", topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))

def walkfn(dirname):
    for name in os.listdir(dirname):
        path = os.path.join(dirname, name)
        if os.path.isdir(path):
            walkfn(path)
        else:
            print path
cwd = os.getcwd()
walkfn(".")


def print_directory_contents(sPath): 
import os 
for sChild in os.listdir(sPath): 
 sChildPath = os.path.join(sPath,sChild) 
if os.path.isdir(sChildPath): 
 print_directory_contents(sChildPath)
else: 
 print(sChildPath)

find $PWD  to get absolutely path in linux

A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))
A1 = range(10)
A2 = sorted([i for i in A1 if i in A0])
A3 = sorted([A0[s] for s in A0])
A4 = [i for i in A1 if i in A3]
A5 = {i:i*i for i in A1}
A6 = [[i,i*i] for i in A1]

A0 {'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4} 
A1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 
A2 [] 
A3 [1, 2, 3, 4, 5] 
A4 [1, 2, 3, 4, 5] 
A5 {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
A6 [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

		
 def f(x,l=[]): for i in range(x): l.append(i*i) print(l) f(2) f(3,[3,2,1]) f(3)
for k in dict:           —for key in dictionary
	    print(k)
Monkey patching 
Mock testing 


print ([x for x in 123])  --'int' object is not iterable

print ([x for x in '123’]). iterable

 print (dict(zip('abc','123')))   ---{'a': '1', 'b': '2', 'c': '3'}

print (dict(zip('abc',123))). ---zip argument #2 must support iteration


Decorators:
https://www.geeksforgeeks.org/class-method-vs-static-method-python/
What do these mean to you: @classmethod, @staticmethod, @property?
  python doesn’t support method overloading like C++ or Java so we use class methods to create factory methods
We generally use class method to create factory methods. Factory methods return class object ( similar to a constructor ) for different use cases.
We generally use static methods to create utility functions.
A class method takes cls as first parameter while a static method needs no specific parameters.
A class method can access or modify class state while a static method can’t access or modify it.

# Python program to demonstrate
# use of class method and static method.
from datetime import date
 
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
     
    # a class method to create a Person object by birth year.
    @classmethod
    def fromBirthYear(cls, name, year):
        return cls(name, date.today().year - year)
     
    # a static method to check if a Person is adult or not.
    @staticmethod
    def isAdult(age):
        return age > 18
 
person1 = Person('mayank', 21)
person2 = Person.fromBirthYear('mayank', 1996)
 
print person1.age
print person2.age
 
# print the result
print Person.isAdult(22)



setter and getter
class P:

    def __init__(self,x):
        self.set_x(x)

    def get_x(self):
        return self.__x

    def set_x(self, x):
        if x < 0:
            self.__x = 0
        elif x > 1000:
            self.__x = 1000
        else:
            self.__x = x

https://www.python-course.eu/python3_properties.php
class P:

    def __init__(self,x):
        self.x = x

    @property
    def x(self):
        return self.__x

    @x.setter
    def x(self, x):
        if x < 0:
            self.__x = 0
        elif x > 1000:
            self.__x = 1000
        else:
            self.__x = x
p1 = P(1001)
print()
Testing
Q12. What is monkey patching in Python?

Ans: In Python, the term monkey patch only refers to dynamic modifications of a class or module at run-time.

Consider the below example:

1
2
3
4
# m.py
class MyClass:
def f(self):
print "f()"
We can then run the monkey-patch testing like this:

1
2
3
4
5
6
7
import m
def monkey_f(self):
print "monkey_f()"
 
m.MyClass.f = monkey_f
obj = m.MyClass()
obj.f()
The output will be as below:

monkey_f()
Mocking in Python

https://semaphoreci.com/community/tutorials/getting-started-with-mocking-in-python

5. Explain how Python does Compile-time and Run-time code checking?
https://intellipaat.com/interview-question/python-interview-questions/

16. Explain all the file processing modes supported by Python ?
Python allows you to open files in one of the three modes. They are:
read-only mode, write-only mode, read-write mode, and append mode by specifying the flags “r”, “w”, “rw”, “a” respectively.
A text file can be opened in any one of the above said modes by specifying the option “t” along with
“r”, “w”, “rw”, and “a”, so that the preceding modes become “rt”, “wt”, “rwt”, and “at”.A binary file can be opened in any one of the above said modes by specifying the option “b” along with “r”, “w”, “rw”, and “a” so that the preceding modes become “rb”, “wb”, “rwb”, “ab”.



 What is the use of enumerate() in Python?
Using enumerate() function you can iterate through the sequence and retrieve the index position and its corresponding value at the same time.
>>> for i,v in enumerate([‘Python’,’Java’,’C++’]):
print(i,v)
0 Python
1 Java
2 C++

JSON to Python

Reading JSON means converting JSON into a Python value (object). As mentioned above, the json library parses JSON into a dictionary or list in Python. In order to do that, we use the loads() function (load from a string), as follows:

1
2
3
import json
jsonData = '{"name": "Frank", "age": 39}'
jsonToPython = json.loads(jsonData)

Python to JSON

In the previous section, we saw how to convert JSON into a Python value (i.e. Dictionary). In this section, I will show you how we can convert (encode) a Python value to JSON.

import json

pythonDictionary = {'name':'Bob', 'age':44, 'isEmployed':True}
dictionaryToJson = json.dumps(pythonDictionary)
print(dictionaryToJson)

jsonData = '{"name": "Frank", "age": 39}'
jsonToPython = json.loads(jsonData)
print(jsonToPython)

class Employee(object):
def __init__(self, name):
self.name = name

class User(object):
def __init__(self, name, password):
self.name = name
self.password = password

alice = User('Alice A. Adams', 'secret')

vinay = Employee("vinay")

def jsonDefault(object):
if isinstance(object,list):
return list(object)
return object.__dict__

pets = [u'Tiger', u'Panther', u'Toad']
jsonAbder = json.dumps(pets,default=jsonDefault)
print(jsonAbder)
jsonAbder = json.dumps(alice,default=jsonDefault). — only one kind of object
# jsonAbder = json.dumps({"abder":"aa"})
print (jsonAbder)
 To remove dublication from list
>>> t = [1,2,3,1,2,3,4,7,8]
>>> print (set(t))
{1, 2, 3, 4, 7, 8}
>>> print (list(set(t)))
t = [1, 2, 3, 1, 2, 5, 6, 7, 8]
s = []
for i in t:
    if i not in s:
        s.append(i)
print(s)
Functional/expression oriented programming
map , filter and reduce
>>> items = [1, 2, 3, 4, 5] >>> >>> def sqr(x): return x ** 2 >>> list(map(sqr, items)) [1, 4, 9, 16, 25]		
list(map((lambda x: x **2), items))
[1, 4, 9, 16, 25]
def square(x):
return (x ** 2)


def cube(x):
return (x ** 3)


funcs = [square, cube]
for r in range(5):
value = map((lambda x: x(r)), funcs)
print list(value)					
>>> list(range(-5,5))
[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4] >>> >>> list( filter((lambda x: x < 0), range(-5,5))) [-5, -4, -3, -2, -1] >>>
finding intersection of two lists
a = [1,2,3,5,7,9]
b = [2,3,5,6,7,8]
print (list(filter(lambda x: x in a,b))) or
print ([x for x in a if x in b])
Reduce is in the functools in Python 3.0. It is more complex. It accepts an iterator to process, but it's not an iterator itself. It returns a single result:
from functools import reduce

reduce( (lambda x, y: x * y), [1, 2, 3] )

concatenate a list of strings to make a sentence
import functools >>> L = ['Testing ', 'shows ', 'the ', 'presence', ', ','not ', 'the ', 'absence ', 'of ', 'bugs'] >>> functools.reduce( (lambda x,y:x+y), L) 'Testing shows the presence, not the absence of bugs' >>>
 How is Multithreading achieved in Python?

Ans: 

Python has a multi-threading package but if you want to multi-thread to speed your code up.
Python has a construct called the Global Interpreter Lock (GIL). The GIL makes sure that only one of your ‘threads’ can execute at any one time. A thread acquires the GIL, does a little work, then passes the GIL onto the next thread.
This happens very quickly so to the human eye it may seem like your threads are executing in parallel, but they are really just taking turns using the same CPU core.
All this GIL passing adds overhead to execution. This means that if you want to make your code run faster then using the threading package often isn’t a good idea.


Pickle
https://www.geeksforgeeks.org/understanding-python-pickling-example/
import pickle

a = ['test value', 'test value 2', 'test value 3']
file_Name = "testfile"
fileObject = open(file_Name, 'wb')
pickle.dump(a, fileObject)
fileObject.close()
fileObject = open(file_Name, 'r')
b = pickle.load(fileObject)
print(a)
numpy

http://cs231n.github.io/python-numpy-tutorial/#numpy
import numpy as np
 b= np.array([[1,2,3],[4,5,6]])    # Create a rank 2 array
print(b.shape)                     # Prints "(2, 3)"
print(b[0, 0], b[0, 1], b[1, 0])   # Prints "1 2 4”
b = a[:2,1:3] ---[[2 3] and  [5 6]]

import numpy as np
arr = np.array([1, 3, 2, 4, 5])
print(arr.argsort()[-3:][::-1]).  —o/p [ 4 3 1 ]
argsort()—— Returns the indices that would sort an array.

Lambda Vs Def.

def can hold multiple expressions while lambda is a uni-expression function.
def generates a function and designates a name so as to call it later. lambda forms a function and returns the function itself.
def can have a return statement. lambda can’t have return statements
lambda supports to get used inside a list and dictionary.
 What Are Different Methods To Copy An Object In Python?

There are two ways to copy objects in Python.

copy.copy() function
It makes a copy of the file from source to destination.
It’ll return a shallow copy of the parameter.
copy.deepcopy() function
It also produces the copy of an object from the source to destination.
It’ll return a deep copy of the parameter that you can pass to the function.


What Are Different Methods To Copy An Object In Python?

There are two ways to copy objects in Python.

https://www.python-course.eu/deep_copy.php

copy.copy() function
It makes a copy of the file from source to destination.
It’ll return a shallow copy of the parameter.
copy.deepcopy() function — cop
It also produces the copy of an object from the source to destination.
It’ll return a deep copy of the parameter that you can pass to the function.

from copy import deepcopy

lst1 = ['a','b',['ab','ba']]

lst2 = deepcopy(lst1)

lst2[2][1] = "d"
lst2[0] = "c";

print lst2
print lst1
>>> lst1 = ['a','b',['ab','ba']]
>>> lst2 = lst1[:]
>>> lst2[0] = 'c'
>>> lst2[2][1] = 'd'
>>> print(lst1)
['a', 'b', ['ab', 'd']]

How Does The Ternary Operator Work In Python?

The ternary operator is an alternative for the conditional statements. It combines of the true or false values with a statement that you need to test. The syntax would look like the one given below.

[onTrue] if [Condition] else [onFalse]

x, y = 35, 75
smaller = x if x < y else y

Python does not have a Switch statement, but you can write a Switch function and then use it.:The official answer says, "You can do this easily enough with a sequence of if... elif... elif... else". And that you can use dictionary mapping for functions and dispatch methods for classes.
def numbers_to_strings(argument):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
    }
    return switcher.get(argument, "nothing")
This code is analogous to:

function(argument){
    switch(argument) {
        case 0:
            return "zero";
        case 1:
            return "one";
        case 2:
            return "two";
        default:
            return "nothing";
    };
};

 



What Is The Command To Debug A Python Program?

The following command helps run a Python program in debug mode.

$ python -m pdb python-script.pys(tep)
Execute the current line, stop at the first possible occasion (either in a function that is called or on the next line in the current function).
n(ext)
Continue execution until the next line in the current function is reached or it returns. (The difference between next and step is that step stops inside a called function, while next executes called functions at (nearly) full speed, only stopping at the next line in the current function.)
unt(il)
Continue execution until the line with the line number greater than the current one is reached or when returning from current frame.

New in version 2.6.

r(eturn)
Continue execution until the current function returns.
c(ont(inue))
Continue execution, only stop when a breakpoint is encountered.
j(ump) lineno
Set the next line that will be executed. Only available in the bottom-most frame. This lets you jump back and execute code again, or jump forward to skip code that you don’t want to run.

It should be noted that not all jumps are allowed — for instance it is not possible to jump into the middle of a for loop or out of a finally clause.

l(ist) [first[, last]]
List source code for the current file. Without arguments, list 11 lines around the current line or continue the previous listing. With one argument, list 11 lines around at that line. With two arguments, list the given range; if the second argument is less than the first, it is interpreted as a count.
a(rgs)
Print the argument list of the current function.	
		
	
	
	
